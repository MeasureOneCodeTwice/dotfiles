#Currently, many scripts are missing. Eg, change brightness.
# Read `man 5 sway` for a complete reference.

exec export PATH=$HOME/.scripts/screenshot-utils:$PATH

input "type:keyboard" {
    xkb_file ~/.config/dv_keymap.xkb
}

#dwt disables trackpad while typing 
#tap allows trackpad taps to click
input type:touchpad {
	natural_scroll enabled 
        dwt enabled
        tap enabled
}

#fuzzel styling
set $myfuzzel fuzzel -I --font=Inconsolata-Regular --background=000000d0 --selection-color=ffffffd0 --selection-text-color=000000ff --border-color=ffffffd0 --text-color=ffffffff --match-color=81f775ff --selection-match-color=079f01ff --prompt-color=ffffffff --input-color=ffffffff

###styling###
smart_gaps on
#these are very specific to remove any gaps from neovim terminal sessions 
gaps top 4
gaps bottom 4
gaps left 8
gaps right 8

default_border pixel 2
smart_borders on

#focused inactive is the window that was last focused (but not currently focused)
#                       outline bg      textCol  ???    window outline
client.focused          #FFFFFF #000000 #FFFFFF #000000 #FFFFFF
client.focused_inactive #000000 #000000 #FFFFFF #000000 #0F0F0F
client.unfocused        #000000 #000000 #FFFFFF #000000 #0F0F0F


### Variables
set $mod Mod4
set $left h
set $down j
set $up k
set $right l
set $term foot
# on the original workspace that the command was run on.
set $menu $myfuzzel | xargs swaymsg exec --

output * background ~/.config/sway/shelves.png stretch

# Example configuration:

#   output HDMI-A-1 resolution 1920x1080 position 1920,
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

set $lock ~/.scripts/lock_desktop

exec swayidle -w \
         timeout 300 '$lock' \
         timeout 600 'swaymsg "output * power off"' resume 'swaymsg "output * power on"' \
         before-sleep '$lock
# lock screen after 300 seconds of inactivity, turn off
# displays after another 300 seconds. turn screen back on when
# resumed. 


# You can get the names of your inputs by running: swaymsg -t get_inputsw
# Read `man 5 sway-input` for more information about this section.


    #this command stores anything copied into cliphist's database
    #so it can be recalled in the clipboard history.
    exec wl-paste --watch cliphist store
    #cliphist list has a tab after the number which is ugly in fuzzel, 
    #se we replace it with a space, but cliphist decode needs the tab,
    #so we use sed to replace the first space in the string with a tab.
    bindsym $mod+Shift+v exec cliphist list | sed 's/\t/ /' | $myfuzzel --dmenu | sed 's/ /\t/' | cliphist decode | wl-copy

    #screenshot keybindings 
    # bindsym Print exec screenshot
    bindsym Print exec screenshot
    bindsym Shift+Print exec selective_screenshot
    bindsym $mod+Print exec window_screenshot 

    bindsym $mod+Escape exec $lock
    bindsym $mod+Return exec $term

    bindsym $mod+q kill
    bindsym $mod+d exec $menu

    bindsym XF86MonBrightnessUp exec sudo change_brightness 100
    bindsym XF86MonBrightnessDown exec sudo change_brightness -100

    bindsym XF86AudioRaiseVolume exec amixer sset 'Master' 1%+
    bindsym XF86AudioLowerVolume exec amixer sset 'Master' 1%-

    bindsym $mod+XF86AudioRaiseVolume exec amixer sset 'Master' 5%+
    bindsym $mod+XF86AudioLowerVolume exec amixer sset 'Master' 5%-

    bindsym XF86AudioMute        exec amixer sset 'Speaker' toggle


    # Reload the configuration file
    bindsym $mod+Shift+c reload

    # Exit sway (logs you out of your Wayland session)
    bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
#
# Moving around:
#
    # Move your focus around
    bindsym $mod+$left focus left
    bindsym $mod+$down focus down
    bindsym $mod+$up focus up
    bindsym $mod+$right focus right
    # Or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # Move the focused window with the same, but add Shift
    bindsym $mod+Shift+$left move left
    bindsym $mod+Shift+$down move down
    bindsym $mod+Shift+$up move up
    bindsym $mod+Shift+$right move right
    # Ditto, with arrow keys
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right
#
# Workspaces:
#
    # Switch to workspace
    bindsym $mod+1 workspace number 1
    bindsym $mod+2 workspace number 2
    bindsym $mod+3 workspace number 3
    bindsym $mod+4 workspace number 4
    bindsym $mod+5 workspace number 5
    bindsym $mod+6 workspace number 6
    bindsym $mod+7 workspace number 7
    bindsym $mod+8 workspace number 8
    bindsym $mod+9 workspace number 9
    bindsym $mod+0 workspace number 10
    # Move focused container to workspace
    bindsym $mod+Shift+1 move container to workspace number 1
    bindsym $mod+Shift+2 move container to workspace number 2
    bindsym $mod+Shift+3 move container to workspace number 3
    bindsym $mod+Shift+4 move container to workspace number 4
    bindsym $mod+Shift+5 move container to workspace number 5
    bindsym $mod+Shift+6 move container to workspace number 6
    bindsym $mod+Shift+7 move container to workspace number 7
    bindsym $mod+Shift+8 move container to workspace number 8
    bindsym $mod+Shift+9 move container to workspace number 9
    bindsym $mod+Shift+0 move container to workspace number 10
    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default.
#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mod+b splith
    bindsym $mod+v splitv

    # Switch the current container between different layout styles
    bindsym $mod+s layout stacking
    bindsym $mod+w layout tabbed
    bindsym $mod+e layout toggle split

    bindsym $mod+f fullscreen
    bindsym $mod+Shift+space floating toggle
    bindsym $mod+space focus mode_toggle

    # Move focus to the parent container
    bindsym $mod+a focus parent
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mod+Shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+minus scratchpad show
#
# Resizing containers:
#
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"

#
# Status Bar:
#
# Read `man 5 sway-bar` for more information about this section.
bar {
    position top
    font Inconsolata-Regular

    # When the status_command prints a new line to stdout, swaybar updates.
    status_command ~/.config/sway/status_command.sh

    colors {
        statusline #ffffff
        background #00000000
        inactive_workspace #FFFFFF #000000 #FFFFFF
        focused_workspace #FFFFFF #FFFFFF #000000
    }
}
include /etc/sway/config.d/*
